{"version":3,"sources":["components/Template.js","components/TodoInsert.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Template","children","todoLength","className","TodoInsert","onInsertToggle","onInsertTodo","selectedTodo","onRemove","onUpdate","useState","value","setValue","useEffect","text","onClick","onSubmit","id","e","preventDefault","placeholder","onChange","target","type","TodoItem","todo","onCheckToggle","onChangeSelectedTodo","checked","TodoList","todos","map","nextId","App","setSelectedTodo","insertToggle","setInsertToggle","setTodos","prev","length","alert","concat","filter","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6afc9fd7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Template.css\";\r\n\r\nconst Template = ({children, todoLength}) => {\r\n    return (\r\n        <div className=\"Template\">\r\n            <div className=\"title\">오늘의 할일 ({todoLength})</div>\r\n            <div>{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Template;","import React, { useEffect, useState } from 'react';\r\nimport { MdAddCircle } from 'react-icons/md';\r\nimport {TiTrash, TiPencil} from \"react-icons/ti\"\r\nimport \"./TodoInsert.css\";\r\n\r\nconst TodoInsert = ({onInsertToggle, onInsertTodo, selectedTodo, onRemove, onUpdate }) => {\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onInsertTodo(value);\r\n        setValue(\"\");\r\n        onInsertToggle();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedTodo) {\r\n            setValue(selectedTodo.text);\r\n        }\r\n    }, [selectedTodo]);\r\n\r\n    return (\r\n    <div>\r\n        <div className=\"background\" onClick={onInsertToggle}></div>\r\n        <form onSubmit={selectedTodo ? () => {onUpdate(selectedTodo.id, value)} : onSubmit}>\r\n            <input placeholder=\"please type\" value={value} onChange={onChange}></input>\r\n            {selectedTodo ? (\r\n            <div className=\"rewrite\">\r\n                <TiPencil onClick={() => {onUpdate(selectedTodo.id, value)}}/>\r\n                <TiTrash onClick={() => {onRemove(selectedTodo.id)}}/>\r\n            </div>\r\n            ) : (\r\n            <button type=\"submit\">\r\n                <MdAddCircle/>\r\n                </button>)}\r\n        </form>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {MdCheckBox, MdCheckBoxOutlineBlank} from 'react-icons/md';\r\nimport \"./TodoItem.css\";\r\n\r\nconst TodoItem = ({todo ,onCheckToggle, onInsertToggle, onChangeSelectedTodo}) => {\r\n    const {id, text, checked} = todo;\r\n    return ( <div className=\"TodoItem\">\r\n        <div className={`content ${checked ? 'checked' : \"\"}`}>\r\n            {checked ? <MdCheckBox onClick={() => { onCheckToggle(id); }}/> : <MdCheckBoxOutlineBlank onClick={() => { onCheckToggle(id); }}/>}\r\n            <div className=\"text\" onClick={() => {\r\n                onChangeSelectedTodo(todo);\r\n                onInsertToggle();\r\n            }}>{text}</div>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport \"./TodoList.css\";\r\n\r\nconst TodoList = ({todos, onCheckToggle, onInsertToggle, onChangeSelectedTodo}) => {\r\n  return(  \r\n  <div className=\"TodoList\">\r\n    {todos.map(todo => (\r\n  <TodoItem todo={todo} key={todo.id} onCheckToggle={onCheckToggle} onInsertToggle={onInsertToggle} onChangeSelectedTodo={onChangeSelectedTodo}/>))}</div>\r\n  );\r\n};\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\nimport { MdAddCircle } from 'react-icons/md';\nimport './App.css';\nimport Template from './components/Template';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nlet nextId = 4;\n\nconst App = () => {\n  const [selectedTodo, setSelectedTodo] = useState(null);\n  const [insertToggle, setInsertToggle] = useState(false);\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: \"할일 1\",\n      checked: true\n    },\n    {\n      id: 2,\n      text: \"할일 2\",\n      checked: false\n    },\n    {\n      id: 3,\n      text: \"할일 3\",\n      checked: true\n    },\n  ]);\n\n  const onInsertToggle = () => {\n    if (selectedTodo) {\n      setSelectedTodo(null);\n    }\n    setInsertToggle(prev => !prev);\n  };\n\n  const onInsertTodo = text => {\n    if (text === \"\") {\n      return alert('할 일을 입력해주세요.')\n    } else {\n      const todo = {\n        id: nextId,\n        text,\n        checked: false\n      }\n      setTodos(todos => todos.concat(todo));\n      nextId++;\n    }\n  };\n\n  const onCheckToggle = (id) => {\n    setTodos(todos => todos.map(todo => (todo.id === id ? {...todo, checked: !todo.checked} : todo)))\n  }\n\n  const onChangeSelectedTodo = (todo) => {\n    setSelectedTodo(todo)\n  }\n\n  const onRemove = id => {\n    onInsertToggle();\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  }\n\n  const onUpdate = (id, text) => {\n    onInsertToggle();\n    setTodos(todos => todos.map(todo => (todo.id === id ? {...todo, text} : todo))\n      );\n  };\n\n  return ( <Template todoLength={todos.length}>\n    <TodoList todos={todos} onCheckToggle={onCheckToggle} onInsertToggle={onInsertToggle} onChangeSelectedTodo={onChangeSelectedTodo}/>\n    <div className=\"add-todo-button\" onClick={onInsertToggle}>\n      <MdAddCircle/>\n      </div>\n      {insertToggle && (\n      <TodoInsert\n      selectedTodo={selectedTodo}\n      onInsertToggle={onInsertToggle}\n      onInsertTodo={onInsertTodo}\n      onRemove={onRemove}\n      onUpdate={onUpdate}\n      />\n      )}\n    </Template>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}